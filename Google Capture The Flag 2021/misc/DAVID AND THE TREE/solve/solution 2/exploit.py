#!/usr/bin/env python3
import io

import deflatedecompress  # modified from https://github.com/nayuki/Simple-DEFLATE-decompressor/blob/master/python/deflatedecompress.py
import zip  # from https://formats.kaitai.io/zip/python.html


parsed_zip = zip.Zip.from_file('challenge.zip')

flag = []
for section_number, section in enumerate(parsed_zip.sections):
    if isinstance(section.body, zip.Zip.LocalFile):
        deflated_file = section.body.body
    else:
        continue

    deflated_buf = deflatedecompress.BitInputStream(io.BytesIO(deflated_file))
    inflated_buf = deflatedecompress.Decompressor.decompress_to_bytes(deflated_buf)

    table = deflatedecompress.hacky._code_bits_to_symbol

    for k, v in table.items():
        if v == ord('E'):
            k = k & 0xFF

            # reverse bit order
            rk = 0
            for _ in range(8):
                rk = rk << 1
                if k & 1 == 1:
                    rk = rk | 1
                k = k >> 1

            flag.append(rk)

print(bytes(flag).decode())